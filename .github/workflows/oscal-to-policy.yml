# This is a basic workflow to help you get started with Actions

permissions: write-all

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      pr-head-branch:
        description: Head branch name which is merged into the base branch
        required: true
        type: string
      pr-base-branch:
        description: Base branch name into which the head branch is merged
        required: true
        type: string
      compliance-catalog-url:
        description: OSCAL Catalog URL
        default: ./oscal/catalog.json
        required: false
        type: string
      compliance-profile-url:
        description: OSCAL Profile URL
        default: ./oscal/profile.json
        required: false
        type: string
      compliance-component-definition-url:
        description: OSCAL Component Definition URL
        default: ./oscal/component-definition.json
        required: false
        type: string
      policy-resources-url:
        description: Policy Resources URL
        default: ./policy-resources/
        required: false
        type: string
      cluster-label:
        description: 'Label (key: value) to which clusters belong'
        default: 'level: nist-high'
        required: false
        type: string
      output-dir-for-ocm-policy-manifests:
        description: Output directory for generated OCM manifests
        required: true
        type: string
      output-dir-for-policy-generator-manifests:
        description: Output directory for Policy Generator manifests (this is intermedeately generated by C2P to generate OCM manifests) 
        default: /tmp/ocm-policy-generator-manifests
        required: false
        type: string

    secrets:
      PAT:
        description: Github token (need read and write permission for Push and PR)
        required: true
    outputs:
      commit-sha:
        description: "Commit SHA"
        value: ${{ jobs.oscal-to-policy.outputs.commit-sha }}

env:
  out-for-policy-generator: ./ocm-policy-generator-manifests
  name: "GitHub Actions: C2P to generate OCM policies"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "compliance-to-policy"
  oscal-to-policy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      commit-sha: ${{ steps.output.outputs.output }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/install-policy-generator

      - uses: ./.github/actions/install-c2pcli

      - id: create-c2pcr
        uses: ./.github/actions/create-c2pcr
        with:
          compliance-catalog-url: ${{ inputs.compliance-catalog-url }}
          compliance-profile-url: ${{ inputs.compliance-profile-url }}
          compliance-component-definition-url: ${{ inputs.compliance-component-definition-url }}
          policy-resources-url: ${{ inputs.policy-resources-url }}
          cluster-label: ${{ inputs.cluster-label }}

      - name: Compose policies from OSCAL artifacts
        run: |
          rm -rf ${{ inputs.output-dir-for-ocm-policy-manifests }}
          rm -rf ${{ inputs.output-dir-for-policy-generator-manifests }}
          c2pcli compose --c2pcr ${{ steps.create-c2pcr.outputs.c2pcr }} --out ${{ inputs.output-dir-for-ocm-policy-manifests }} --out-for-policy-generator ${{ inputs.output-dir-for-policy-generator-manifests }}
        env:
          username: c2p
          token: ${{ secrets.PAT }}

      - name: Add changes to ${{ inputs.pr-head-branch }}
        run: |
          git --version
          git config user.name "${{ env.name }}"
          git config user.email "<>"
          git checkout -b ${{ inputs.pr-head-branch }}
          git add ${{ inputs.output-dir-for-ocm-policy-manifests }}

      - name: Add changes for policy generator sources to ${{ inputs.pr-head-branch }} if required
        if: inputs.output-dir-for-policy-generator-manifests != '/tmp/ocm-policy-generator-manifests'
        run: |
          git add ${{ inputs.output-dir-for-policy-generator-manifests }}

      - name: Push changes to ${{ inputs.pr-head-branch }}
        run: |
          git commit --allow-empty -m "Update"
          git push origin ${{ inputs.pr-head-branch }} -f

      - name: Create PR to ${{ inputs.pr-base-branch }} if not exist
        uses: ./.github/actions/create-pr-if-not-exist
        with:
          base-branch: ${{ inputs.pr-base-branch }}
          head-branch: ${{ inputs.pr-head-branch }}
          body: 'Created by ${{ env.name }}'
          github-token: ${{ secrets.PAT }}

      - id: output
        name: Output
        run: |
          echo "output=`git rev-parse HEAD`" >> $GITHUB_OUTPUT